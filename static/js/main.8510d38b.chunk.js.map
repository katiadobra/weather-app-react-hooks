{"version":3,"sources":["components/Form/Form.js","components/Weather/Weather.js","components/Titles/Titles.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onSubmit","getWeather","type","placeholder","name","Weather","description","city","country","error","temperature","Titles","App","useState","weather","setWeather","APIKEY","e","a","target","elements","value","preventDefault","fetch","then","res","json","data","apiData","sys","Math","round","main","temp","icon","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"6VAwBeA,G,MArBF,SAAAC,GACX,OACE,yBAAKC,UAAU,aACb,0BAAMC,SAAUF,EAAMG,YACpB,2BACEC,KAAK,OACLC,YAAY,OACZC,KAAK,SAGP,2BACEF,KAAK,OACLC,YAAY,UACZC,KAAK,YAEP,8CCSOC,G,MAxBC,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,YAAaC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YACnD,OACE,yBAAKX,UAAU,gCAEZW,GACC,uBAAGX,UAAU,4BAA4BW,EAAzC,UAGDH,GAAQC,GACP,yBAAKT,UAAU,SAASQ,EAAxB,KAAgCC,GAGjCF,GACC,yBAAKP,UAAU,wBACb,yBAAKA,UAAU,WAAWO,IAG7BG,GACC,2BAAIA,M,MCUGE,MA5Bf,WACE,OACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,yBACb,wBAAIA,UAAU,iBAAd,kBACA,uBAAGA,UAAU,oBAAb,8CAIF,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,YACf,yBAAKA,UAAU,aAEjB,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,2BACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,0BACf,yBAAKA,UAAU,2BACf,yBAAKA,UAAU,4B,MC6CNa,MAjEf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,KAEPC,EAAS,mCAFF,4CAIb,WAAyBC,GAAzB,mBAAAC,EAAA,6DACQX,EAAOU,EAAEE,OAAOC,SAASb,KAAKc,MAC9Bb,EAAUS,EAAEE,OAAOC,SAASZ,QAAQa,MAG1CJ,EAAEK,iBALJ,SAOUC,MAAM,qDAAD,OAAsDhB,EAAtD,YAA8DC,EAA9D,+BAA4FQ,IACtGQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIA,KATlB,OAMQC,EANR,OAYMb,EADER,GAAQC,EACC,CACTmB,KAAMC,EACNrB,KAAMqB,EAAQxB,KACdI,QAASoB,EAAQC,IAAIrB,QACrBF,YAAasB,EAAQd,QAAQ,GAAGR,YAChCI,YAAaoB,KAAKC,MAAMH,EAAQI,KAAKC,MACrCxB,MAAO,IAGE,CACTkB,KAAM,GACNpB,KAAM,GACNC,QAAS,GACTF,YAAa,GACbI,YAAa,GACbD,MAAO,mCA3Bf,4CAJa,sBAoCb,OACE,yBAAKV,UAAU,OACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAME,WA9CL,8CA+CD,kBAAC,EAAD,CACEM,KAAMO,EAAQP,KACdC,QAASM,EAAQN,QACjBF,YAAaQ,EAAQR,YACrBI,YAAaI,EAAQJ,YACrBwB,KAAMpB,EAAQoB,KACdzB,MAAOK,EAAQL,QAEhB0B,QAAQC,IAAI,eAAgBtB,EAAQa,YCjD/BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL0B,QAAQ1B,MAAMA,EAAM4C,c","file":"static/js/main.8510d38b.chunk.js","sourcesContent":["import React from 'react';\nimport './Form.scss';\n\nconst Form = props => {\n  return (\n    <div className=\"form-wrap\">\n      <form onSubmit={props.getWeather}>\n        <input\n          type='text'\n          placeholder='city'\n          name='city'\n        />\n\n        <input\n          type='text'\n          placeholder='country'\n          name='country'\n        />\n        <button>Submit</button>\n      </form>\n    </div>\n  )\n}\n\nexport default Form;\n","import React from 'react';\nimport './Weather.scss';\n\nconst Weather = ({description, city, country, error, temperature}) => {\n  return (\n    <div className=\"weather-block text_container\">\n      {/* degrees */}\n      {temperature && \n        <p className=\"degrees weather-block__t\">{temperature} Â°C</p>\n      }\n      {/* place */}\n      {city && country && \n        <div className=\"place\">{city}, {country}</div>\n      }\n      {/* description */}\n      {description && \n        <div className=\"weather-block__descr\">\n          <div className=\"weather\">{description}</div>\n        </div>\n      }\n      {error && \n        <p>{error}</p>\n      }\n    </div>\n  )\n}\n\nexport default Weather;\n","import React from 'react';\nimport './Titles.scss';\n\nfunction Titles() {\n  return (\n    <div className=\"sideblock\">\n      <div className=\"bg night_bg\"></div>\n      <div className=\"bg frosty_bg\"></div>\n      <div className=\"bg sunny_bg\"></div>\n      <div className=\"text-container titles\">\n        <h1 className=\"titles__title\">Weather Finder</h1>\n        <p className=\"titles__subtitle\">\n          Find temperature, conditions, and more...\n        </p>\n      </div>\n      <div className=\"circle-container\">\n        <div className=\"circle\"></div>\n        <div className=\"circle1\"></div>\n        <div className=\"circle2\"></div>\n        <div className=\"circle3\"></div>\n      </div>\n      <div className=\"ground1 ground1_night\"></div>\n      <div className=\"ground1 ground1_frosty\"></div>\n      <div className=\"ground1 ground1_sunny\"></div>\n      <div className=\"ground2 ground2_night\"></div>\n      <div className=\"ground2 ground2_frosty\"></div>\n      <div className=\"ground2 ground2_sunny\"></div>\n    </div>\n  );\n}\n\nexport default Titles;","import React, { useState } from 'react';\nimport Form from './components/Form/Form';\nimport Weather from './components/Weather/Weather';\nimport Titles from './components/Titles/Titles';\nimport './App.scss';\n\nfunction App() {\n  const [weather, setWeather] = useState([]);\n  const APIKEY = '7123b0eb63f6d1cd0dd2b3ae1f5be143';\n\n  async function fetchData(e) {\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n\n    e.preventDefault();\n    const apiData = \n      await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&appid=${APIKEY}`)\n      .then(res => res.json())\n      .then(data => data)\n\n      if (city && country) {\n        setWeather({\n          data: apiData,\n          city: apiData.name,\n          country: apiData.sys.country,\n          description: apiData.weather[0].description,\n          temperature: Math.round(apiData.main.temp),\n          error: \"\"\n        })\n      } else {\n        setWeather({\n          data: '',\n          city: '',\n          country: '',\n          description: '',\n          temperature: '',\n          error: \"Please type a city and country\"\n        })\n      }\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"title-container\">\n              <Titles />\n            </div>\n\n            <div className=\"form-container\">\n              <Form getWeather={fetchData} />\n              <Weather\n                city={weather.city}\n                country={weather.country}\n                description={weather.description}\n                temperature={weather.temperature}\n                icon={weather.icon}\n                error={weather.error}\n              />\n              {console.log('weather.data', weather.data)}\n            </div>\n          </div>\n        \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}